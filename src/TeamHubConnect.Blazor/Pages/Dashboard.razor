@page "/"
@page "/dashboard"
@using TeamHubConnect.Blazor.Store.Auth
@using TeamHubConnect.Blazor.Store.Workspace
@using TeamHubConnect.Blazor.Store.Channel
@using Fluxor
@inherits FluxorComponent
@inject IState<AuthState> AuthState
@inject IState<WorkspaceState> WorkspaceState
@inject IState<ChannelState> ChannelState
@inject IDispatcher Dispatcher
@inject NavigationManager Navigation

@if (!AuthState.Value.IsAuthenticated)
{
    <div class="auth-redirect">
        <MudProgressCircular Indeterminate="true" />
        <MudText>Redirecting to login...</MudText>
    </div>
}
else
{
    <div class="dashboard-container">
        <!-- Welcome Header -->
        <div class="dashboard-header">
            <div class="welcome-section">
                <MudText Typo="Typo.h4" Class="mb-2">
                    Welcome back, @AuthState.Value.CurrentUser?.DisplayName! ðŸ‘‹
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">
                    @GetWelcomeMessage()
                </MudText>
            </div>
            
            <div class="quick-actions">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary"
                          StartIcon="@Icons.Material.Filled.Add"
                          OnClick="@(() => showCreateChannelDialog = true)">
                    New Channel
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Primary"
                          StartIcon="@Icons.Material.Filled.PersonAdd"
                          OnClick="@(() => showInviteDialog = true)">
                    Invite People
                </MudButton>
            </div>
        </div>

        <!-- Quick Stats -->
        <div class="stats-grid">
            <MudPaper Class="stats-card" Elevation="2">
                <div class="stat-content">
                    <MudIcon Icon="@Icons.Material.Filled.Forum" Color="Color.Primary" Size="Size.Large" />
                    <div class="stat-numbers">
                        <MudText Typo="Typo.h5">@GetUnreadCount()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Unread Messages</MudText>
                    </div>
                </div>
            </MudPaper>

            <MudPaper Class="stats-card" Elevation="2">
                <div class="stat-content">
                    <MudIcon Icon="@Icons.Material.Filled.Group" Color="Color.Secondary" Size="Size.Large" />
                    <div class="stat-numbers">
                        <MudText Typo="Typo.h5">@(WorkspaceState.Value.CurrentWorkspace?.MemberCount ?? 0)</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Team Members</MudText>
                    </div>
                </div>
            </MudPaper>

            <MudPaper Class="stats-card" Elevation="2">
                <div class="stat-content">
                    <MudIcon Icon="@Icons.Material.Filled.Tag" Color="Color.Tertiary" Size="Size.Large" />
                    <div class="stat-numbers">
                        <MudText Typo="Typo.h5">@ChannelState.Value.Channels.Count</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Active Channels</MudText>
                    </div>
                </div>
            </MudPaper>

            <MudPaper Class="stats-card" Elevation="2">
                <div class="stat-content">
                    <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Warning" Size="Size.Large" />
                    <div class="stat-numbers">
                        <MudText Typo="Typo.h5">@GetMentionCount()</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Mentions</MudText>
                    </div>
                </div>
            </MudPaper>
        </div>

        <!-- Main Content Grid -->
        <div class="content-grid">
            <!-- Recent Activity -->
            <MudPaper Class="activity-panel" Elevation="2">
                <div class="panel-header">
                    <MudText Typo="Typo.h6">Recent Activity</MudText>
                    <MudButton Variant="Variant.Text" Size="Size.Small" EndIcon="@Icons.Material.Filled.ArrowForward">
                        View All
                    </MudButton>
                </div>
                
                <div class="activity-list">
                    @for (int i = 0; i < 5; i++)
                    {
                        <div class="activity-item">
                            <MudAvatar Size="Size.Small" Color="Color.Primary">
                                <MudIcon Icon="@Icons.Material.Filled.Person" />
                            </MudAvatar>
                            <div class="activity-content">
                                <MudText Typo="Typo.body2">
                                    <strong>John Doe</strong> posted in <strong>#general</strong>
                                </MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    @GetRandomTime() ago
                                </MudText>
                            </div>
                            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" />
                        </div>
                    }
                </div>
            </MudPaper>

            <!-- Popular Channels -->
            <MudPaper Class="channels-panel" Elevation="2">
                <div class="panel-header">
                    <MudText Typo="Typo.h6">Popular Channels</MudText>
                    <MudButton Variant="Variant.Text" Size="Size.Small" EndIcon="@Icons.Material.Filled.ArrowForward">
                        Browse All
                    </MudButton>
                </div>
                
                <div class="channels-list">
                    @foreach (var channel in ChannelState.Value.Channels.Take(6))
                    {
                        <div class="channel-item" @onclick="@(() => NavigateToChannel(channel.Id))">
                            <div class="channel-info">
                                <MudIcon Icon="@GetChannelIcon(channel.Type)" Size="Size.Small" />
                                <div class="channel-details">
                                    <MudText Typo="Typo.body2" Class="channel-name">@channel.Name</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @channel.MemberCount members
                                    </MudText>
                                </div>
                            </div>
                            @if (channel.HasUnread)
                            {
                                <MudChip Size="Size.Small" Color="Color.Error">@channel.UnreadCount</MudChip>
                            }
                        </div>
                    }
                </div>
            </MudPaper>

            <!-- Team Members -->
            <MudPaper Class="members-panel" Elevation="2">
                <div class="panel-header">
                    <MudText Typo="Typo.h6">Team Members</MudText>
                    <MudButton Variant="Variant.Text" Size="Size.Small" EndIcon="@Icons.Material.Filled.ArrowForward">
                        View All
                    </MudButton>
                </div>
                
                <div class="members-list">
                    @if (WorkspaceState.Value.CurrentWorkspace?.Members != null)
                    {
                        @foreach (var member in WorkspaceState.Value.CurrentWorkspace.Members.Take(8))
                        {
                            <div class="member-item">
                                <MudAvatar Size="Size.Medium" Color="Color.Secondary">
                                    @if (!string.IsNullOrEmpty(member.AvatarUrl))
                                    {
                                        <MudImage Src="@member.AvatarUrl" Alt="@member.DisplayName" />
                                    }
                                    else
                                    {
                                        @member.DisplayName.Substring(0, 1)
                                    }
                                </MudAvatar>
                                <div class="member-status @GetStatusClass(member.Status)"></div>
                                <MudText Typo="Typo.caption" Class="member-name">@member.DisplayName</MudText>
                            </div>
                        }
                    }
                </div>
            </MudPaper>

            <!-- Quick Actions Panel -->
            <MudPaper Class="actions-panel" Elevation="2">
                <div class="panel-header">
                    <MudText Typo="Typo.h6">Quick Actions</MudText>
                </div>
                
                <div class="actions-grid">
                    <MudButton Variant="Variant.Text" 
                              FullWidth="true"
                              StartIcon="@Icons.Material.Filled.Search"
                              Class="action-button"
                              OnClick="@(() => showSearchDialog = true)">
                        Search Messages
                    </MudButton>
                    
                    <MudButton Variant="Variant.Text" 
                              FullWidth="true"
                              StartIcon="@Icons.Material.Filled.VideoCall"
                              Class="action-button"
                              OnClick="StartVideoCall">
                        Start Video Call
                    </MudButton>
                    
                    <MudButton Variant="Variant.Text" 
                              FullWidth="true"
                              StartIcon="@Icons.Material.Filled.Share"
                              Class="action-button"
                              OnClick="ShareScreen">
                        Share Screen
                    </MudButton>
                    
                    <MudButton Variant="Variant.Text" 
                              FullWidth="true"
                              StartIcon="@Icons.Material.Filled.Settings"
                              Class="action-button"
                              OnClick="@(() => Navigation.NavigateTo("/settings"))">
                        Settings
                    </MudButton>
                </div>
            </MudPaper>
        </div>

        <!-- Upcoming Events/Meetings -->
        <MudPaper Class="events-panel" Elevation="2">
            <div class="panel-header">
                <MudText Typo="Typo.h6">Upcoming Events</MudText>
                <MudButton Variant="Variant.Text" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add">
                    New Event
                </MudButton>
            </div>
            
            <div class="events-timeline">
                @for (int i = 0; i < 3; i++)
                {
                    <div class="event-item">
                        <div class="event-time">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@GetRandomEventTime()</MudText>
                        </div>
                        <div class="event-details">
                            <MudText Typo="Typo.body2" Class="event-title">Daily Standup</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">with 5 team members</MudText>
                        </div>
                        <div class="event-actions">
                            <MudIconButton Icon="@Icons.Material.Filled.VideoCall" Size="Size.Small" Color="Color.Primary" />
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                        </div>
                    </div>
                }
            </div>
        </MudPaper>
    </div>

    <!-- Dialogs -->
    <CreateChannelDialog @bind-IsOpen="showCreateChannelDialog" />
    <InvitePeopleDialog @bind-IsOpen="showInviteDialog" />
    <SearchDialog @bind-IsOpen="showSearchDialog" />
}

@code {
    private bool showCreateChannelDialog = false;
    private bool showInviteDialog = false;
    private bool showSearchDialog = false;

    protected override void OnInitialized()
    {
        if (!AuthState.Value.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Load workspace and channel data if not already loaded
        if (!WorkspaceState.Value.Workspaces.Any())
        {
            Dispatcher.Dispatch(new LoadWorkspacesAction());
        }
    }

    private string GetWelcomeMessage()
    {
        var hour = DateTime.Now.Hour;
        var greeting = hour switch
        {
            < 12 => "Good morning",
            < 17 => "Good afternoon",
            _ => "Good evening"
        };

        var workspace = WorkspaceState.Value.CurrentWorkspace?.Name ?? "your workspace";
        return $"{greeting}! Ready to collaborate with {workspace}?";
    }

    private int GetUnreadCount()
    {
        return ChannelState.Value.Channels.Sum(c => c.UnreadCount);
    }

    private int GetMentionCount()
    {
        // Mock data - would come from actual mention service
        return new Random().Next(0, 5);
    }

    private string GetChannelIcon(string channelType)
    {
        return channelType switch
        {
            "Public" => Icons.Material.Filled.Tag,
            "Private" => Icons.Material.Filled.Lock,
            "DirectMessage" => Icons.Material.Filled.Person,
            _ => Icons.Material.Filled.Group
        };
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "online" => "status-online",
            "away" => "status-away",
            "busy" => "status-busy",
            _ => "status-offline"
        };
    }

    private void NavigateToChannel(Guid channelId)
    {
        Dispatcher.Dispatch(new SelectChannelAction(channelId));
        Navigation.NavigateTo($"/channels/{channelId}");
    }

    private void StartVideoCall()
    {
        // TODO: Implement video call functionality
        Navigation.NavigateTo("/video-call");
    }

    private void ShareScreen()
    {
        // TODO: Implement screen sharing
    }

    private string GetRandomTime()
    {
        var times = new[] { "5 min", "10 min", "1 hour", "2 hours", "1 day" };
        return times[new Random().Next(times.Length)];
    }

    private string GetRandomEventTime()
    {
        var now = DateTime.Now;
        var futureTime = now.AddMinutes(new Random().Next(30, 480));
        return futureTime.ToString("HH:mm");
    }

    // Dialog components (simplified - would be separate files)
    public class CreateChannelDialog : ComponentBase
    {
        [Parameter] public bool IsOpen { get; set; }
        [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

        // Implementation would go here
    }

    public class InvitePeopleDialog : ComponentBase
    {
        [Parameter] public bool IsOpen { get; set; }
        [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

        // Implementation would go here
    }

    public class SearchDialog : ComponentBase
    {
        [Parameter] public bool IsOpen { get; set; }
        [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

        // Implementation would go here
    }
}

<style>
    .auth-redirect {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        gap: 16px;
    }

    .dashboard-container {
        padding: 24px;
        max-width: 1400px;
        margin: 0 auto;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 32px;
        flex-wrap: wrap;
        gap: 16px;
    }

    .welcome-section h4 {
        margin: 0;
        color: var(--mud-palette-text-primary);
    }

    .quick-actions {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 32px;
    }

    .stats-card {
        padding: 24px;
        border-radius: 12px;
        transition: transform 0.2s ease;
    }

    .stats-card:hover {
        transform: translateY(-2px);
    }

    .stat-content {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .stat-numbers h5 {
        margin: 0;
        font-weight: 600;
    }

    .content-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 24px;
        margin-bottom: 32px;
    }

    .panel-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 20px 0;
        margin-bottom: 16px;
    }

    .activity-panel, .channels-panel, .members-panel, .actions-panel {
        border-radius: 12px;
        overflow: hidden;
    }

    .activity-list, .channels-list {
        padding: 0 20px 20px;
    }

    .activity-item, .channel-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 0;
        border-bottom: 1px solid var(--mud-palette-divider);
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .activity-item:hover, .channel-item:hover {
        background-color: var(--mud-palette-action-hover);
        margin: 0 -12px;
        padding: 12px;
        border-radius: 8px;
    }

    .activity-item:last-child, .channel-item:last-child {
        border-bottom: none;
    }

    .activity-content, .channel-details {
        flex: 1;
    }

    .channel-info {
        display: flex;
        align-items: center;
        gap: 8px;
        flex: 1;
    }

    .channel-name {
        font-weight: 500;
    }

    .members-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
        gap: 16px;
        padding: 0 20px 20px;
    }

    .member-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        position: relative;
    }

    .member-status {
        position: absolute;
        top: 2px;
        right: 2px;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid white;
    }

    .status-online { background-color: #10b981; }
    .status-away { background-color: #f59e0b; }
    .status-busy { background-color: #ef4444; }
    .status-offline { background-color: #6b7280; }

    .member-name {
        text-align: center;
        font-size: 0.75rem;
    }

    .actions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 8px;
        padding: 0 20px 20px;
    }

    .action-button {
        justify-content: flex-start;
        padding: 12px;
        text-transform: none;
    }

    .events-panel {
        border-radius: 12px;
        overflow: hidden;
    }

    .events-timeline {
        padding: 0 20px 20px;
    }

    .event-item {
        display: flex;
        align-items: center;
        gap: 16px;
        padding: 16px 0;
        border-bottom: 1px solid var(--mud-palette-divider);
    }

    .event-item:last-child {
        border-bottom: none;
    }

    .event-time {
        min-width: 60px;
        text-align: center;
    }

    .event-details {
        flex: 1;
    }

    .event-title {
        font-weight: 500;
        margin-bottom: 4px;
    }

    .event-actions {
        display: flex;
        gap: 4px;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .dashboard-container {
            padding: 16px;
        }

        .dashboard-header {
            flex-direction: column;
            align-items: stretch;
        }

        .quick-actions {
            justify-content: stretch;
        }

        .quick-actions .mud-button {
            flex: 1;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
        }

        .content-grid {
            grid-template-columns: 1fr;
            gap: 16px;
        }

        .members-list {
            grid-template-columns: repeat(auto-fill, minmax(60px, 1fr));
        }

        .actions-grid {
            grid-template-columns: 1fr;
        }
    }

    @media (max-width: 480px) {
        .stats-grid {
            grid-template-columns: 1fr;
        }

        .panel-header {
            flex-direction: column;
            align-items: stretch;
            gap: 8px;
        }
    }
</style>