version: '3.8'

services:
  # TeamHub Connect API
  teamhub-api:
    build:
      context: .
      dockerfile: src/TeamHubConnect.Api/Dockerfile
    ports:
      - "7001:80"
      - "7002:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - ASPNETCORE_Kestrel__Certificates__Default__Password=your-cert-password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=TeamHubConnect;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__MongoDB=mongodb://mongodb:27017
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - ConnectionStrings__RabbitMQ=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - ~/.aspnet/https:/https:ro
    depends_on:
      - sqlserver
      - redis
      - mongodb
      - elasticsearch
      - rabbitmq
    networks:
      - teamhub-network

  # TeamHub Connect Blazor Frontend
  teamhub-blazor:
    build:
      context: .
      dockerfile: src/TeamHubConnect.Blazor/Dockerfile
    ports:
      - "5001:80"
    environment:
      - ApiBaseUrl=https://teamhub-api:443
    depends_on:
      - teamhub-api
    networks:
      - teamhub-network

  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Developer
    volumes:
      - sqlserver-data:/var/opt/mssql
    networks:
      - teamhub-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - teamhub-network

  # MongoDB for Message Storage
  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
    volumes:
      - mongodb-data:/data/db
    networks:
      - teamhub-network

  # Elasticsearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - teamhub-network

  # Kibana for Search Analytics
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch
    networks:
      - teamhub-network

  # RabbitMQ Message Bus
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - teamhub-network

  # Seq Logging
  seq:
    image: datalust/seq:latest
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
    volumes:
      - seq-data:/data
    networks:
      - teamhub-network

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
    depends_on:
      - teamhub-api
      - teamhub-blazor
    networks:
      - teamhub-network

volumes:
  sqlserver-data:
  redis-data:
  mongodb-data:
  elasticsearch-data:
  rabbitmq-data:
  seq-data:

networks:
  teamhub-network:
    driver: bridge